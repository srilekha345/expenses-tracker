import java.io.*;
import java.util.*;

class ExpenseTracker {

    // Define the Expense class
    static class Expense implements Serializable {
        String date;
        String category;
        double amount;

        Expense(String date, String category, double amount) {
            this.date = date;
            this.category = category;
            this.amount = amount;
        }

        @Override
        public String toString() {
            return "Date: " + date + ", Category: " + category + ", Amount: " + amount;
        }
    }

    private Map<String, List<Expense>> expensesByCategory = new HashMap<>();
    private static final String FILE_NAME = "expenses.ser";

    // Register a new user
    public void registerUser() {
        System.out.println("User registered successfully.");
    }

    // Add an expense
    public void addExpense(String date, String category, double amount) {
        Expense expense = new Expense(date, category, amount);
        expensesByCategory.computeIfAbsent(category, k -> new ArrayList<>()).add(expense);
        System.out.println("Expense added: " + expense);
    }

    // List all expenses
    public void listExpenses() {
        System.out.println("Expenses:");
        for (String category : expensesByCategory.keySet()) {
            for (Expense expense : expensesByCategory.get(category)) {
                System.out.println(expense);
            }
        }
    }

    // Calculate total expenses by category
    public void categoryWiseSummation() {
        System.out.println("Category-wise Summation:");
        for (String category : expensesByCategory.keySet()) {
            double total = expensesByCategory.get(category).stream().mapToDouble(exp -> exp.amount).sum();
            System.out.println("Category: " + category + ", Total: " + total);
        }
    }

    // Save expenses to file
    public void saveExpenses() {
        try (ObjectOutputStream oos = new ObjectOutputStream(new FileOutputStream(FILE_NAME))) {
            oos.writeObject(expensesByCategory);
            System.out.println("Expenses saved to file.");
        } catch (IOException e) {
            System.out.println("Error saving expenses: " + e.getMessage());
        }
    }

    // Load expenses from file
    @SuppressWarnings("unchecked")
    public void loadExpenses() {
        try (ObjectInputStream ois = new ObjectInputStream(new FileInputStream(FILE_NAME))) {
            expensesByCategory = (Map<String, List<Expense>>) ois.readObject();
            System.out.println("Expenses loaded from file.");
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Error loading expenses: " + e.getMessage());
        }
    }

    public static void main(String[] args) {
        ExpenseTracker tracker = new ExpenseTracker();
        Scanner scanner = new Scanner(System.in);

        System.out.println("Welcome to the Expense Tracker!");

        tracker.registerUser();

        boolean running = true;
        while (running) {
            System.out.println("\nChoose an option:");
            System.out.println("1. Add Expense");
            System.out.println("2. List Expenses");
            System.out.println("3. Category-wise Summation");
            System.out.println("4. Save Expenses");
            System.out.println("5. Load Expenses");
            System.out.println("6. Exit");

            int choice = scanner.nextInt();
            scanner.nextLine();  // Consume newline

            switch (choice) {
                case 1:
                    System.out.println("Enter date (YYYY-MM-DD):");
                    String date = scanner.nextLine();
                    System.out.println("Enter category:");
                    String category = scanner.nextLine();
                    System.out.println("Enter amount:");
                    double amount = scanner.nextDouble();
                    tracker.addExpense(date, category, amount);
                    break;
                case 2:
                    tracker.listExpenses();
                    break;
                case 3:
                    tracker.categoryWiseSummation();
                    break;
                case 4:
                    tracker.saveExpenses();
                    break;
                case 5:
                    tracker.loadExpenses();
                    break;
                case 6:
                    running = false;
                    break;
                default:
                    System.out.println("Invalid choice.");
            }
        }
        scanner.close();
    }
}
